openapi: 3.0.3
info:
  title: FlagFit Pro API
  description: |
    Flag Football Training and Analytics Platform API
    
    ## Overview
    The FlagFit Pro API provides comprehensive endpoints for managing flag football training programs, 
    tracking athletic performance, and analyzing training data.
    
    ## Authentication
    All API endpoints require authentication via Bearer token obtained through the `/auth/login` endpoint.
    
    ## Rate Limiting
    API requests are limited to 60 requests per minute per user/IP address.
    
    ## Versioning
    API versioning is handled through the `API-Version` header. Current supported versions:
    - `v1` (current)
    - `v2` (beta)
    
  version: 1.0.0
  termsOfService: https://flagfitpro.com/terms
  contact:
    name: FlagFit Pro API Support
    url: https://flagfitpro.com/support
    email: api-support@flagfitpro.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8090/api
    description: Development server (PocketBase)
  - url: http://localhost:3001/api/v1
    description: Local API server
  - url: https://api.flagfitpro.com/v1
    description: Production server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              player:
                summary: Player login
                value:
                  email: "player@example.com"
                  password: "password123"
              coach:
                summary: Coach login  
                value:
                  email: "coach@example.com"
                  password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Refresh expired access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # User Management
  /users/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Retrieve current user's profile information
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Users
      summary: Update user profile
      description: Update current user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Training Sessions
  /training/sessions:
    get:
      tags:
        - Training
      summary: Get training sessions
      description: Retrieve user's training sessions with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of sessions per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: date_from
          in: query
          description: Filter sessions from this date (ISO 8601)
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          description: Filter sessions to this date (ISO 8601)
          schema:
            type: string
            format: date
        - name: type
          in: query
          description: Filter by session type
          schema:
            type: string
            enum: [strength, agility, endurance, skills, scrimmage]
      responses:
        '200':
          description: Training sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TrainingSession'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Training
      summary: Create training session
      description: Create a new training session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrainingSessionRequest'
      responses:
        '201':
          description: Training session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /training/sessions/{sessionId}:
    get:
      tags:
        - Training
      summary: Get training session
      description: Retrieve a specific training session by ID
      parameters:
        - name: sessionId
          in: path
          required: true
          description: Training session ID
          schema:
            type: string
      responses:
        '200':
          description: Training session retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingSession'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Training
      summary: Update training session
      description: Update a specific training session
      parameters:
        - name: sessionId
          in: path
          required: true
          description: Training session ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrainingSessionRequest'
      responses:
        '200':
          description: Training session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags:
        - Training
      summary: Delete training session
      description: Delete a specific training session
      parameters:
        - name: sessionId
          in: path
          required: true
          description: Training session ID
          schema:
            type: string
      responses:
        '204':
          description: Training session deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Analytics
  /analytics/stats:
    get:
      tags:
        - Analytics
      summary: Get training statistics
      description: Retrieve user's training statistics and performance metrics
      parameters:
        - name: timeframe
          in: query
          description: Time period for statistics
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y, all]
            default: 30d
        - name: metrics
          in: query
          description: Specific metrics to include (comma-separated)
          schema:
            type: string
            example: "sessions,duration,performance"
      responses:
        '200':
          description: Training statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingStats'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /analytics/performance:
    get:
      tags:
        - Analytics
      summary: Get performance trends
      description: Retrieve performance trend data over time
      parameters:
        - name: metric
          in: query
          required: true
          description: Performance metric to analyze
          schema:
            type: string
            enum: [speed, agility, strength, endurance, accuracy]
        - name: period
          in: query
          description: Time period for trend analysis
          schema:
            type: string
            enum: [week, month, quarter, year]
            default: month
      responses:
        '200':
          description: Performance trends retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceTrends'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Health Check
  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Check API health status
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 6
          example: "password123"
        remember:
          type: boolean
          default: false

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - first_name
        - last_name
        - role
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 6
        first_name:
          type: string
          minLength: 1
        last_name:
          type: string
          minLength: 1
        role:
          type: string
          enum: [player, coach, admin]
        date_of_birth:
          type: string
          format: date
        phone:
          type: string
          pattern: '^[+]?[1-9][\d\s-()]{7,15}$'

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserProfile'
        token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: Refresh token for obtaining new access tokens
        expires_at:
          type: string
          format: date-time
          description: Token expiration time

    # User Schemas
    UserProfile:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [player, coach, admin]
        date_of_birth:
          type: string
          format: date
        phone:
          type: string
        avatar_url:
          type: string
          format: uri
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserPreferences:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark, auto]
          default: auto
        notifications:
          type: object
          properties:
            email:
              type: boolean
              default: true
            push:
              type: boolean
              default: true
            sms:
              type: boolean
              default: false
        units:
          type: string
          enum: [metric, imperial]
          default: metric

    UpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        date_of_birth:
          type: string
          format: date
        preferences:
          $ref: '#/components/schemas/UserPreferences'

    # Training Schemas
    TrainingSession:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [strength, agility, endurance, skills, scrimmage]
        duration:
          type: integer
          description: Duration in minutes
        date:
          type: string
          format: date-time
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/Exercise'
        metrics:
          $ref: '#/components/schemas/SessionMetrics'
        notes:
          type: string
        tags:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Exercise:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          type: string
          enum: [warmup, strength, agility, cardio, skills, cooldown]
        sets:
          type: integer
        reps:
          type: integer
        duration:
          type: integer
          description: Duration in seconds
        rest_time:
          type: integer
          description: Rest time in seconds
        weight:
          type: number
          description: Weight in kg
        distance:
          type: number
          description: Distance in meters
        notes:
          type: string

    SessionMetrics:
      type: object
      properties:
        calories_burned:
          type: integer
        max_heart_rate:
          type: integer
        avg_heart_rate:
          type: integer
        performance_score:
          type: number
          minimum: 0
          maximum: 100
        completion_rate:
          type: number
          minimum: 0
          maximum: 100

    CreateTrainingSessionRequest:
      type: object
      required:
        - title
        - type
        - date
      properties:
        title:
          type: string
          minLength: 1
        description:
          type: string
        type:
          type: string
          enum: [strength, agility, endurance, skills, scrimmage]
        date:
          type: string
          format: date-time
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/Exercise'
        notes:
          type: string
        tags:
          type: array
          items:
            type: string

    UpdateTrainingSessionRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [strength, agility, endurance, skills, scrimmage]
        date:
          type: string
          format: date-time
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/Exercise'
        metrics:
          $ref: '#/components/schemas/SessionMetrics'
        notes:
          type: string
        tags:
          type: array
          items:
            type: string

    # Analytics Schemas
    TrainingStats:
      type: object
      properties:
        timeframe:
          type: string
        total_sessions:
          type: integer
        total_duration:
          type: integer
          description: Total duration in minutes
        avg_session_duration:
          type: number
          description: Average session duration in minutes
        calories_burned:
          type: integer
        performance_trend:
          type: number
          description: Performance improvement percentage
        streak_days:
          type: integer
          description: Current training streak in days
        session_types:
          type: object
          additionalProperties:
            type: integer
        weekly_distribution:
          type: array
          items:
            type: object
            properties:
              day:
                type: string
              sessions:
                type: integer
              duration:
                type: integer

    PerformanceTrends:
      type: object
      properties:
        metric:
          type: string
        period:
          type: string
        data_points:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              value:
                type: number
              sessions_count:
                type: integer
        trend:
          type: string
          enum: [improving, declining, stable]
        improvement_rate:
          type: number
          description: Improvement rate as percentage

    # System Schemas
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        services:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/ServiceStatus'
            auth:
              $ref: '#/components/schemas/ServiceStatus'
            api:
              $ref: '#/components/schemas/ServiceStatus'

    ServiceStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        response_time:
          type: number
          description: Response time in milliseconds
        error:
          type: string

    # Common Schemas
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer
        has_next:
          type: boolean
        has_prev:
          type: boolean

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "INVALID_INPUT"
            message: "The request contains invalid parameters"
            timestamp: "2024-01-01T00:00:00Z"

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "UNAUTHORIZED"
            message: "Authentication token is required"
            timestamp: "2024-01-01T00:00:00Z"

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "FORBIDDEN"
            message: "Insufficient permissions to access this resource"
            timestamp: "2024-01-01T00:00:00Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "NOT_FOUND"
            message: "The requested resource was not found"
            timestamp: "2024-01-01T00:00:00Z"

    Conflict:
      description: Conflict - resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "CONFLICT"
            message: "A user with this email already exists"
            timestamp: "2024-01-01T00:00:00Z"

    RateLimited:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "RATE_LIMITED"
            message: "Rate limit exceeded. Please try again later."
            timestamp: "2024-01-01T00:00:00Z"
      headers:
        Retry-After:
          description: Seconds to wait before making another request
          schema:
            type: integer

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "INTERNAL_ERROR"
            message: "An unexpected error occurred"
            timestamp: "2024-01-01T00:00:00Z"

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User profile management
  - name: Training
    description: Training session management
  - name: Analytics
    description: Performance analytics and statistics
  - name: System
    description: System health and monitoring